# -*- coding: utf-8 -*-
"""StockPredictionLinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J0VLqwEL41SfcStM7gsg2VkRyx4cIZht
"""

import pandas as pd

import datetime
import pandas_datareader.data as web
from pandas import Series, DataFrame
from sklearn.linear_model import LinearRegression
from sklearn import linear_model
from sklearn import model_selection
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from matplotlib import style
from sklearn import preprocessing



start = datetime.datetime(2010, 1, 1)
end = datetime.datetime(2019, 9, 20)

df = web.DataReader("TSLA", 'yahoo', start, end)

df.head()

df['HL_PCT'] = (df['High'] - df['Low']) / df['Close'] * 100.0
df['PCT_change'] = (df['Close'] - df['Open']) / df['Open'] * 100.0

df.head()

forecast_col = 'Adj Close'

df.fillna(method='ffill', inplace=True)

forecast_out = 30

df['label'] = df[forecast_col].shift(-forecast_out)

df.tail()

df = df.drop(labels='Adj Close', axis=1)
import numpy as np

X = np.array(df.drop(['label'], 1))

X = preprocessing.scale(X)
X

X_lately = X[-forecast_out:]

X = X[:-forecast_out]

X

df.head()

df.dropna(inplace=True)

y = np.array(df['label'])

y

X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2)

reg = linear_model.Ridge(alpha=.5)
reg.fit(X_train, y_train)
confidencereg = reg.score(X_test, y_test)

confidencereg = reg.score(X_test, y_test)

confidencereg #accuracy of model

forecast_set_reg = reg.predict(X_lately)
forecast_set_reg

df['Forecast'] = np.nan# adding forecast column

df.head()

last_date = df.iloc[-1].name
last_date

last_unix = last_date.timestamp()
last_unix

one_day = 86400
next_unix = last_unix + one_day
next_unix

for i in forecast_set_reg:
    next_date = datetime.datetime.fromtimestamp(next_unix)
    next_unix += 86400
    df.loc[next_date] = [np.nan for _ in range(len(df.columns)-1)]+[i]

df.tail()

style.use('ggplot')

df['Close'].plot()
df['Forecast'].plot()
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

